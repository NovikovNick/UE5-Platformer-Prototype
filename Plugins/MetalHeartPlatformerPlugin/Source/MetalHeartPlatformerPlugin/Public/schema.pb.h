// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_schema_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_schema_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_schema_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal
{
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_schema_2eproto
{
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries
      [] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux
      [] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema
      [4] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable
      serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_schema_2eproto;
namespace ser
{
class GameObject;
struct GameObjectDefaultTypeInternal;
extern GameObjectDefaultTypeInternal _GameObject_default_instance_;
class GameState;
struct GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Vector2;
struct Vector2DefaultTypeInternal;
extern Vector2DefaultTypeInternal _Vector2_default_instance_;
}  // namespace ser
PROTOBUF_NAMESPACE_OPEN
template <>
::ser::GameObject* Arena::CreateMaybeMessage<::ser::GameObject>(Arena*);
template <>
::ser::GameState* Arena::CreateMaybeMessage<::ser::GameState>(Arena*);
template <>
::ser::Player* Arena::CreateMaybeMessage<::ser::Player>(Arena*);
template <>
::ser::Vector2* Arena::CreateMaybeMessage<::ser::Vector2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ser
{

enum PlayerState : int
{
  IDLE = 0,
  RUN = 1,
  JUMP = 2,
  FALLING = 3,
  LANDING = 4,
  SQUAT = 5,
  OVERHEAD_ATTACK = 6,
  MID_ATTACK = 7,
  LOW_ATTACK = 8,
  BLOCK = 9,
  SQUAT_BLOCK = 10,
  HIT_STUN = 11,
  BLOCK_STUN = 12,
  SQUAT_BLOCK_STUN = 13,
  DEATH = 14,
  PlayerState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PlayerState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PlayerState_IsValid(int value);
constexpr PlayerState PlayerState_MIN = IDLE;
constexpr PlayerState PlayerState_MAX = DEATH;
constexpr int PlayerState_ARRAYSIZE = PlayerState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerState_descriptor();
template <typename T>
inline const std::string& PlayerState_Name(T enum_t_value)
{
  static_assert(::std::is_same<T, PlayerState>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to function PlayerState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(PlayerState_descriptor(),
                                                       enum_t_value);
}
inline bool PlayerState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
                              PlayerState* value)
{
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerState>(
      PlayerState_descriptor(), name, value);
}
enum AttackPhase : int
{
  STARTUP = 0,
  ACTIVE = 1,
  RECOVERY = 2,
  NONE = 3,
  AttackPhase_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AttackPhase_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AttackPhase_IsValid(int value);
constexpr AttackPhase AttackPhase_MIN = STARTUP;
constexpr AttackPhase AttackPhase_MAX = NONE;
constexpr int AttackPhase_ARRAYSIZE = AttackPhase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttackPhase_descriptor();
template <typename T>
inline const std::string& AttackPhase_Name(T enum_t_value)
{
  static_assert(::std::is_same<T, AttackPhase>::value || ::std::is_integral<T>::value,
                "Incorrect type passed to function AttackPhase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(AttackPhase_descriptor(),
                                                       enum_t_value);
}
inline bool AttackPhase_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
                              AttackPhase* value)
{
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AttackPhase>(
      AttackPhase_descriptor(), name, value);
}
// ===================================================================

class Vector2 final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ser.Vector2)
                                                               */
{
public:
  inline Vector2() : Vector2(nullptr) {}
  ~Vector2() override;
  explicit constexpr Vector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2(const Vector2& from);
  Vector2(Vector2&& from) noexcept : Vector2() { *this = ::std::move(from); }

  inline Vector2& operator=(const Vector2& from)
  {
    CopyFrom(from);
    return *this;
  }
  inline Vector2& operator=(Vector2&& from) noexcept
  {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    )
    {
      InternalSwap(&from);
    }
    else
    {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
  {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
  {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
  {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2& default_instance() { return *internal_default_instance(); }
  static inline const Vector2* internal_default_instance()
  {
    return reinterpret_cast<const Vector2*>(&_Vector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(Vector2& a, Vector2& b) { a.Swap(&b); }
  inline void Swap(Vector2* other)
  {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena())
    {
      InternalSwap(other);
    }
    else
    {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2* other)
  {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector2* New() const final { return new Vector2(); }

  Vector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
  {
    return CreateMaybeMessage<Vector2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector2& from);

private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                        const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr,
                             ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "ser.Vector2"; }

protected:
  explicit Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int
  {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  // @@protoc_insertion_point(class_scope:ser.Vector2)
private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class GameObject final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ser.GameObject)
                                                                  */
{
public:
  inline GameObject() : GameObject(nullptr) {}
  ~GameObject() override;
  explicit constexpr GameObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameObject(const GameObject& from);
  GameObject(GameObject&& from) noexcept : GameObject() { *this = ::std::move(from); }

  inline GameObject& operator=(const GameObject& from)
  {
    CopyFrom(from);
    return *this;
  }
  inline GameObject& operator=(GameObject&& from) noexcept
  {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    )
    {
      InternalSwap(&from);
    }
    else
    {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
  {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
  {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
  {
    return default_instance().GetMetadata().reflection;
  }
  static const GameObject& default_instance() { return *internal_default_instance(); }
  static inline const GameObject* internal_default_instance()
  {
    return reinterpret_cast<const GameObject*>(&_GameObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  friend void swap(GameObject& a, GameObject& b) { a.Swap(&b); }
  inline void Swap(GameObject* other)
  {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena())
    {
      InternalSwap(other);
    }
    else
    {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameObject* other)
  {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameObject* New() const final { return new GameObject(); }

  GameObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
  {
    return CreateMaybeMessage<GameObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameObject& from);

private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                        const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr,
                             ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
  {
    return "ser.GameObject";
  }

protected:
  explicit GameObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                      bool is_message_owned = false);

private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int
  {
    kMeshFieldNumber = 1,
    kPositionFieldNumber = 4,
    kVelocityFieldNumber = 5,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated .ser.Vector2 mesh = 1;
  int mesh_size() const;

private:
  int _internal_mesh_size() const;

public:
  void clear_mesh();
  ::ser::Vector2* mutable_mesh(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::Vector2>* mutable_mesh();

private:
  const ::ser::Vector2& _internal_mesh(int index) const;
  ::ser::Vector2* _internal_add_mesh();

public:
  const ::ser::Vector2& mesh(int index) const;
  ::ser::Vector2* add_mesh();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::Vector2>& mesh() const;

  // .ser.Vector2 position = 4;
  bool has_position() const;

private:
  bool _internal_has_position() const;

public:
  void clear_position();
  const ::ser::Vector2& position() const;
  PROTOBUF_MUST_USE_RESULT ::ser::Vector2* release_position();
  ::ser::Vector2* mutable_position();
  void set_allocated_position(::ser::Vector2* position);

private:
  const ::ser::Vector2& _internal_position() const;
  ::ser::Vector2* _internal_mutable_position();

public:
  void unsafe_arena_set_allocated_position(::ser::Vector2* position);
  ::ser::Vector2* unsafe_arena_release_position();

  // .ser.Vector2 velocity = 5;
  bool has_velocity() const;

private:
  bool _internal_has_velocity() const;

public:
  void clear_velocity();
  const ::ser::Vector2& velocity() const;
  PROTOBUF_MUST_USE_RESULT ::ser::Vector2* release_velocity();
  ::ser::Vector2* mutable_velocity();
  void set_allocated_velocity(::ser::Vector2* velocity);

private:
  const ::ser::Vector2& _internal_velocity() const;
  ::ser::Vector2* _internal_mutable_velocity();

public:
  void unsafe_arena_set_allocated_velocity(::ser::Vector2* velocity);
  ::ser::Vector2* unsafe_arena_release_velocity();

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  // @@protoc_insertion_point(class_scope:ser.GameObject)
private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::Vector2> mesh_;
  ::ser::Vector2* position_;
  ::ser::Vector2* velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class Player final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ser.Player)
                                                              */
{
public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept : Player() { *this = ::std::move(from); }

  inline Player& operator=(const Player& from)
  {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept
  {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    )
    {
      InternalSwap(&from);
    }
    else
    {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
  {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
  {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
  {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() { return *internal_default_instance(); }
  static inline const Player* internal_default_instance()
  {
    return reinterpret_cast<const Player*>(&_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;

  friend void swap(Player& a, Player& b) { a.Swap(&b); }
  inline void Swap(Player* other)
  {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena())
    {
      InternalSwap(other);
    }
    else
    {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other)
  {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final { return new Player(); }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
  {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Player& from);

private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                        const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr,
                             ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "ser.Player"; }

protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int
  {
    kObjFieldNumber = 1,
    kStateFieldNumber = 2,
    kStateFrameFieldNumber = 3,
    kPrevInputFieldNumber = 4,
    kOnGroundFieldNumber = 5,
    kOnDamageFieldNumber = 6,
    kLeftDirectionFieldNumber = 7,
    kIsCrouchFieldNumber = 11,
    kCurrentHealthFieldNumber = 8,
    kMaxHealthFieldNumber = 9,
    kAttackPhaseFieldNumber = 10,
  };
  // .ser.GameObject obj = 1;
  bool has_obj() const;

private:
  bool _internal_has_obj() const;

public:
  void clear_obj();
  const ::ser::GameObject& obj() const;
  PROTOBUF_MUST_USE_RESULT ::ser::GameObject* release_obj();
  ::ser::GameObject* mutable_obj();
  void set_allocated_obj(::ser::GameObject* obj);

private:
  const ::ser::GameObject& _internal_obj() const;
  ::ser::GameObject* _internal_mutable_obj();

public:
  void unsafe_arena_set_allocated_obj(::ser::GameObject* obj);
  ::ser::GameObject* unsafe_arena_release_obj();

  // .ser.PlayerState state = 2;
  void clear_state();
  ::ser::PlayerState state() const;
  void set_state(::ser::PlayerState value);

private:
  ::ser::PlayerState _internal_state() const;
  void _internal_set_state(::ser::PlayerState value);

public:
  // int32 state_frame = 3;
  void clear_state_frame();
  ::PROTOBUF_NAMESPACE_ID::int32 state_frame() const;
  void set_state_frame(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state_frame() const;
  void _internal_set_state_frame(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  // int32 prev_input = 4;
  void clear_prev_input();
  ::PROTOBUF_NAMESPACE_ID::int32 prev_input() const;
  void set_prev_input(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prev_input() const;
  void _internal_set_prev_input(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  // bool on_ground = 5;
  void clear_on_ground();
  bool on_ground() const;
  void set_on_ground(bool value);

private:
  bool _internal_on_ground() const;
  void _internal_set_on_ground(bool value);

public:
  // bool on_damage = 6;
  void clear_on_damage();
  bool on_damage() const;
  void set_on_damage(bool value);

private:
  bool _internal_on_damage() const;
  void _internal_set_on_damage(bool value);

public:
  // bool left_direction = 7;
  void clear_left_direction();
  bool left_direction() const;
  void set_left_direction(bool value);

private:
  bool _internal_left_direction() const;
  void _internal_set_left_direction(bool value);

public:
  // bool is_crouch = 11;
  void clear_is_crouch();
  bool is_crouch() const;
  void set_is_crouch(bool value);

private:
  bool _internal_is_crouch() const;
  void _internal_set_is_crouch(bool value);

public:
  // int32 current_health = 8;
  void clear_current_health();
  ::PROTOBUF_NAMESPACE_ID::int32 current_health() const;
  void set_current_health(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_health() const;
  void _internal_set_current_health(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  // int32 max_health = 9;
  void clear_max_health();
  ::PROTOBUF_NAMESPACE_ID::int32 max_health() const;
  void set_max_health(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_health() const;
  void _internal_set_max_health(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  // .ser.AttackPhase attack_phase = 10;
  void clear_attack_phase();
  ::ser::AttackPhase attack_phase() const;
  void set_attack_phase(::ser::AttackPhase value);

private:
  ::ser::AttackPhase _internal_attack_phase() const;
  void _internal_set_attack_phase(::ser::AttackPhase value);

public:
  // @@protoc_insertion_point(class_scope:ser.Player)
private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ser::GameObject* obj_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 prev_input_;
  bool on_ground_;
  bool on_damage_;
  bool left_direction_;
  bool is_crouch_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_health_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_health_;
  int attack_phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class GameState final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ser.GameState)
                                                                 */
{
public:
  inline GameState() : GameState(nullptr) {}
  ~GameState() override;
  explicit constexpr GameState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameState(const GameState& from);
  GameState(GameState&& from) noexcept : GameState() { *this = ::std::move(from); }

  inline GameState& operator=(const GameState& from)
  {
    CopyFrom(from);
    return *this;
  }
  inline GameState& operator=(GameState&& from) noexcept
  {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    )
    {
      InternalSwap(&from);
    }
    else
    {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
  {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
  {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
  {
    return default_instance().GetMetadata().reflection;
  }
  static const GameState& default_instance() { return *internal_default_instance(); }
  static inline const GameState* internal_default_instance()
  {
    return reinterpret_cast<const GameState*>(&_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;

  friend void swap(GameState& a, GameState& b) { a.Swap(&b); }
  inline void Swap(GameState* other)
  {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena())
    {
      InternalSwap(other);
    }
    else
    {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameState* other)
  {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const final { return new GameState(); }

  GameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
  {
    return CreateMaybeMessage<GameState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameState& from);

private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                        const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr,
                             ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
  {
    return "ser.GameState";
  }

protected:
  explicit GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                     bool is_message_owned = false);

private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int
  {
    kPlayersFieldNumber = 2,
    kPlatformsFieldNumber = 3,
    kMeleeAttacksFieldNumber = 4,
    kFrameFieldNumber = 1,
  };
  // repeated .ser.Player players = 2;
  int players_size() const;

private:
  int _internal_players_size() const;

public:
  void clear_players();
  ::ser::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::Player>* mutable_players();

private:
  const ::ser::Player& _internal_players(int index) const;
  ::ser::Player* _internal_add_players();

public:
  const ::ser::Player& players(int index) const;
  ::ser::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::Player>& players() const;

  // repeated .ser.GameObject platforms = 3;
  int platforms_size() const;

private:
  int _internal_platforms_size() const;

public:
  void clear_platforms();
  ::ser::GameObject* mutable_platforms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::GameObject>* mutable_platforms();

private:
  const ::ser::GameObject& _internal_platforms(int index) const;
  ::ser::GameObject* _internal_add_platforms();

public:
  const ::ser::GameObject& platforms(int index) const;
  ::ser::GameObject* add_platforms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::GameObject>& platforms() const;

  // repeated .ser.GameObject melee_attacks = 4;
  int melee_attacks_size() const;

private:
  int _internal_melee_attacks_size() const;

public:
  void clear_melee_attacks();
  ::ser::GameObject* mutable_melee_attacks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::GameObject>* mutable_melee_attacks();

private:
  const ::ser::GameObject& _internal_melee_attacks(int index) const;
  ::ser::GameObject* _internal_add_melee_attacks();

public:
  const ::ser::GameObject& melee_attacks(int index) const;
  ::ser::GameObject* add_melee_attacks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::GameObject>& melee_attacks()
      const;

  // int32 frame = 1;
  void clear_frame();
  ::PROTOBUF_NAMESPACE_ID::int32 frame() const;
  void set_frame(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame() const;
  void _internal_set_frame(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  // @@protoc_insertion_point(class_scope:ser.GameState)
private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::Player> players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::GameObject> platforms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::GameObject> melee_attacks_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector2

// int32 x = 1;
inline void Vector2::clear_x()
{
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vector2::_internal_x() const
{
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vector2::x() const
{
  // @@protoc_insertion_point(field_get:ser.Vector2.x)
  return _internal_x();
}
inline void Vector2::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value)
{

  x_ = value;
}
inline void Vector2::set_x(::PROTOBUF_NAMESPACE_ID::int32 value)
{
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ser.Vector2.x)
}

// int32 y = 2;
inline void Vector2::clear_y()
{
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vector2::_internal_y() const
{
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vector2::y() const
{
  // @@protoc_insertion_point(field_get:ser.Vector2.y)
  return _internal_y();
}
inline void Vector2::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value)
{

  y_ = value;
}
inline void Vector2::set_y(::PROTOBUF_NAMESPACE_ID::int32 value)
{
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ser.Vector2.y)
}

// -------------------------------------------------------------------

// GameObject

// repeated .ser.Vector2 mesh = 1;
inline int GameObject::_internal_mesh_size() const
{
  return mesh_.size();
}
inline int GameObject::mesh_size() const
{
  return _internal_mesh_size();
}
inline void GameObject::clear_mesh()
{
  mesh_.Clear();
}
inline ::ser::Vector2* GameObject::mutable_mesh(int index)
{
  // @@protoc_insertion_point(field_mutable:ser.GameObject.mesh)
  return mesh_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::Vector2>* GameObject::
    mutable_mesh()
{
  // @@protoc_insertion_point(field_mutable_list:ser.GameObject.mesh)
  return &mesh_;
}
inline const ::ser::Vector2& GameObject::_internal_mesh(int index) const
{
  return mesh_.Get(index);
}
inline const ::ser::Vector2& GameObject::mesh(int index) const
{
  // @@protoc_insertion_point(field_get:ser.GameObject.mesh)
  return _internal_mesh(index);
}
inline ::ser::Vector2* GameObject::_internal_add_mesh()
{
  return mesh_.Add();
}
inline ::ser::Vector2* GameObject::add_mesh()
{
  ::ser::Vector2* _add = _internal_add_mesh();
  // @@protoc_insertion_point(field_add:ser.GameObject.mesh)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::Vector2>& GameObject::mesh()
    const
{
  // @@protoc_insertion_point(field_list:ser.GameObject.mesh)
  return mesh_;
}

// int32 width = 2;
inline void GameObject::clear_width()
{
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObject::_internal_width() const
{
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObject::width() const
{
  // @@protoc_insertion_point(field_get:ser.GameObject.width)
  return _internal_width();
}
inline void GameObject::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value)
{

  width_ = value;
}
inline void GameObject::set_width(::PROTOBUF_NAMESPACE_ID::int32 value)
{
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ser.GameObject.width)
}

// int32 height = 3;
inline void GameObject::clear_height()
{
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObject::_internal_height() const
{
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameObject::height() const
{
  // @@protoc_insertion_point(field_get:ser.GameObject.height)
  return _internal_height();
}
inline void GameObject::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value)
{

  height_ = value;
}
inline void GameObject::set_height(::PROTOBUF_NAMESPACE_ID::int32 value)
{
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ser.GameObject.height)
}

// .ser.Vector2 position = 4;
inline bool GameObject::_internal_has_position() const
{
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool GameObject::has_position() const
{
  return _internal_has_position();
}
inline void GameObject::clear_position()
{
  if (GetArenaForAllocation() == nullptr && position_ != nullptr)
  {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::ser::Vector2& GameObject::_internal_position() const
{
  const ::ser::Vector2* p = position_;
  return p != nullptr
             ? *p
             : reinterpret_cast<const ::ser::Vector2&>(::ser::_Vector2_default_instance_);
}
inline const ::ser::Vector2& GameObject::position() const
{
  // @@protoc_insertion_point(field_get:ser.GameObject.position)
  return _internal_position();
}
inline void GameObject::unsafe_arena_set_allocated_position(::ser::Vector2* position)
{
  if (GetArenaForAllocation() == nullptr)
  {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position)
  {
  }
  else
  {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ser.GameObject.position)
}
inline ::ser::Vector2* GameObject::release_position()
{

  ::ser::Vector2* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr)
  {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr)
  {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ser::Vector2* GameObject::unsafe_arena_release_position()
{
  // @@protoc_insertion_point(field_release:ser.GameObject.position)

  ::ser::Vector2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::ser::Vector2* GameObject::_internal_mutable_position()
{

  if (position_ == nullptr)
  {
    auto* p = CreateMaybeMessage<::ser::Vector2>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::ser::Vector2* GameObject::mutable_position()
{
  ::ser::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ser.GameObject.position)
  return _msg;
}
inline void GameObject::set_allocated_position(::ser::Vector2* position)
{
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr)
  {
    delete position_;
  }
  if (position)
  {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ser::Vector2>::GetOwningArena(
            position);
    if (message_arena != submessage_arena)
    {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
  }
  else
  {
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ser.GameObject.position)
}

// .ser.Vector2 velocity = 5;
inline bool GameObject::_internal_has_velocity() const
{
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool GameObject::has_velocity() const
{
  return _internal_has_velocity();
}
inline void GameObject::clear_velocity()
{
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr)
  {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::ser::Vector2& GameObject::_internal_velocity() const
{
  const ::ser::Vector2* p = velocity_;
  return p != nullptr
             ? *p
             : reinterpret_cast<const ::ser::Vector2&>(::ser::_Vector2_default_instance_);
}
inline const ::ser::Vector2& GameObject::velocity() const
{
  // @@protoc_insertion_point(field_get:ser.GameObject.velocity)
  return _internal_velocity();
}
inline void GameObject::unsafe_arena_set_allocated_velocity(::ser::Vector2* velocity)
{
  if (GetArenaForAllocation() == nullptr)
  {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity)
  {
  }
  else
  {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ser.GameObject.velocity)
}
inline ::ser::Vector2* GameObject::release_velocity()
{

  ::ser::Vector2* temp = velocity_;
  velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr)
  {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr)
  {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ser::Vector2* GameObject::unsafe_arena_release_velocity()
{
  // @@protoc_insertion_point(field_release:ser.GameObject.velocity)

  ::ser::Vector2* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::ser::Vector2* GameObject::_internal_mutable_velocity()
{

  if (velocity_ == nullptr)
  {
    auto* p = CreateMaybeMessage<::ser::Vector2>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::ser::Vector2* GameObject::mutable_velocity()
{
  ::ser::Vector2* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:ser.GameObject.velocity)
  return _msg;
}
inline void GameObject::set_allocated_velocity(::ser::Vector2* velocity)
{
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr)
  {
    delete velocity_;
  }
  if (velocity)
  {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ser::Vector2>::GetOwningArena(
            velocity);
    if (message_arena != submessage_arena)
    {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
  }
  else
  {
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:ser.GameObject.velocity)
}

// -------------------------------------------------------------------

// Player

// .ser.GameObject obj = 1;
inline bool Player::_internal_has_obj() const
{
  return this != internal_default_instance() && obj_ != nullptr;
}
inline bool Player::has_obj() const
{
  return _internal_has_obj();
}
inline void Player::clear_obj()
{
  if (GetArenaForAllocation() == nullptr && obj_ != nullptr)
  {
    delete obj_;
  }
  obj_ = nullptr;
}
inline const ::ser::GameObject& Player::_internal_obj() const
{
  const ::ser::GameObject* p = obj_;
  return p != nullptr ? *p
                      : reinterpret_cast<const ::ser::GameObject&>(
                            ::ser::_GameObject_default_instance_);
}
inline const ::ser::GameObject& Player::obj() const
{
  // @@protoc_insertion_point(field_get:ser.Player.obj)
  return _internal_obj();
}
inline void Player::unsafe_arena_set_allocated_obj(::ser::GameObject* obj)
{
  if (GetArenaForAllocation() == nullptr)
  {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obj_);
  }
  obj_ = obj;
  if (obj)
  {
  }
  else
  {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ser.Player.obj)
}
inline ::ser::GameObject* Player::release_obj()
{

  ::ser::GameObject* temp = obj_;
  obj_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr)
  {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr)
  {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ser::GameObject* Player::unsafe_arena_release_obj()
{
  // @@protoc_insertion_point(field_release:ser.Player.obj)

  ::ser::GameObject* temp = obj_;
  obj_ = nullptr;
  return temp;
}
inline ::ser::GameObject* Player::_internal_mutable_obj()
{

  if (obj_ == nullptr)
  {
    auto* p = CreateMaybeMessage<::ser::GameObject>(GetArenaForAllocation());
    obj_ = p;
  }
  return obj_;
}
inline ::ser::GameObject* Player::mutable_obj()
{
  ::ser::GameObject* _msg = _internal_mutable_obj();
  // @@protoc_insertion_point(field_mutable:ser.Player.obj)
  return _msg;
}
inline void Player::set_allocated_obj(::ser::GameObject* obj)
{
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr)
  {
    delete obj_;
  }
  if (obj)
  {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ser::GameObject>::GetOwningArena(
            obj);
    if (message_arena != submessage_arena)
    {
      obj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj, submessage_arena);
    }
  }
  else
  {
  }
  obj_ = obj;
  // @@protoc_insertion_point(field_set_allocated:ser.Player.obj)
}

// .ser.PlayerState state = 2;
inline void Player::clear_state()
{
  state_ = 0;
}
inline ::ser::PlayerState Player::_internal_state() const
{
  return static_cast<::ser::PlayerState>(state_);
}
inline ::ser::PlayerState Player::state() const
{
  // @@protoc_insertion_point(field_get:ser.Player.state)
  return _internal_state();
}
inline void Player::_internal_set_state(::ser::PlayerState value)
{

  state_ = value;
}
inline void Player::set_state(::ser::PlayerState value)
{
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ser.Player.state)
}

// int32 state_frame = 3;
inline void Player::clear_state_frame()
{
  state_frame_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_state_frame() const
{
  return state_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::state_frame() const
{
  // @@protoc_insertion_point(field_get:ser.Player.state_frame)
  return _internal_state_frame();
}
inline void Player::_internal_set_state_frame(::PROTOBUF_NAMESPACE_ID::int32 value)
{

  state_frame_ = value;
}
inline void Player::set_state_frame(::PROTOBUF_NAMESPACE_ID::int32 value)
{
  _internal_set_state_frame(value);
  // @@protoc_insertion_point(field_set:ser.Player.state_frame)
}

// int32 prev_input = 4;
inline void Player::clear_prev_input()
{
  prev_input_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_prev_input() const
{
  return prev_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::prev_input() const
{
  // @@protoc_insertion_point(field_get:ser.Player.prev_input)
  return _internal_prev_input();
}
inline void Player::_internal_set_prev_input(::PROTOBUF_NAMESPACE_ID::int32 value)
{

  prev_input_ = value;
}
inline void Player::set_prev_input(::PROTOBUF_NAMESPACE_ID::int32 value)
{
  _internal_set_prev_input(value);
  // @@protoc_insertion_point(field_set:ser.Player.prev_input)
}

// bool on_ground = 5;
inline void Player::clear_on_ground()
{
  on_ground_ = false;
}
inline bool Player::_internal_on_ground() const
{
  return on_ground_;
}
inline bool Player::on_ground() const
{
  // @@protoc_insertion_point(field_get:ser.Player.on_ground)
  return _internal_on_ground();
}
inline void Player::_internal_set_on_ground(bool value)
{

  on_ground_ = value;
}
inline void Player::set_on_ground(bool value)
{
  _internal_set_on_ground(value);
  // @@protoc_insertion_point(field_set:ser.Player.on_ground)
}

// bool on_damage = 6;
inline void Player::clear_on_damage()
{
  on_damage_ = false;
}
inline bool Player::_internal_on_damage() const
{
  return on_damage_;
}
inline bool Player::on_damage() const
{
  // @@protoc_insertion_point(field_get:ser.Player.on_damage)
  return _internal_on_damage();
}
inline void Player::_internal_set_on_damage(bool value)
{

  on_damage_ = value;
}
inline void Player::set_on_damage(bool value)
{
  _internal_set_on_damage(value);
  // @@protoc_insertion_point(field_set:ser.Player.on_damage)
}

// bool left_direction = 7;
inline void Player::clear_left_direction()
{
  left_direction_ = false;
}
inline bool Player::_internal_left_direction() const
{
  return left_direction_;
}
inline bool Player::left_direction() const
{
  // @@protoc_insertion_point(field_get:ser.Player.left_direction)
  return _internal_left_direction();
}
inline void Player::_internal_set_left_direction(bool value)
{

  left_direction_ = value;
}
inline void Player::set_left_direction(bool value)
{
  _internal_set_left_direction(value);
  // @@protoc_insertion_point(field_set:ser.Player.left_direction)
}

// int32 current_health = 8;
inline void Player::clear_current_health()
{
  current_health_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_current_health() const
{
  return current_health_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::current_health() const
{
  // @@protoc_insertion_point(field_get:ser.Player.current_health)
  return _internal_current_health();
}
inline void Player::_internal_set_current_health(::PROTOBUF_NAMESPACE_ID::int32 value)
{

  current_health_ = value;
}
inline void Player::set_current_health(::PROTOBUF_NAMESPACE_ID::int32 value)
{
  _internal_set_current_health(value);
  // @@protoc_insertion_point(field_set:ser.Player.current_health)
}

// int32 max_health = 9;
inline void Player::clear_max_health()
{
  max_health_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_max_health() const
{
  return max_health_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::max_health() const
{
  // @@protoc_insertion_point(field_get:ser.Player.max_health)
  return _internal_max_health();
}
inline void Player::_internal_set_max_health(::PROTOBUF_NAMESPACE_ID::int32 value)
{

  max_health_ = value;
}
inline void Player::set_max_health(::PROTOBUF_NAMESPACE_ID::int32 value)
{
  _internal_set_max_health(value);
  // @@protoc_insertion_point(field_set:ser.Player.max_health)
}

// .ser.AttackPhase attack_phase = 10;
inline void Player::clear_attack_phase()
{
  attack_phase_ = 0;
}
inline ::ser::AttackPhase Player::_internal_attack_phase() const
{
  return static_cast<::ser::AttackPhase>(attack_phase_);
}
inline ::ser::AttackPhase Player::attack_phase() const
{
  // @@protoc_insertion_point(field_get:ser.Player.attack_phase)
  return _internal_attack_phase();
}
inline void Player::_internal_set_attack_phase(::ser::AttackPhase value)
{

  attack_phase_ = value;
}
inline void Player::set_attack_phase(::ser::AttackPhase value)
{
  _internal_set_attack_phase(value);
  // @@protoc_insertion_point(field_set:ser.Player.attack_phase)
}

// bool is_crouch = 11;
inline void Player::clear_is_crouch()
{
  is_crouch_ = false;
}
inline bool Player::_internal_is_crouch() const
{
  return is_crouch_;
}
inline bool Player::is_crouch() const
{
  // @@protoc_insertion_point(field_get:ser.Player.is_crouch)
  return _internal_is_crouch();
}
inline void Player::_internal_set_is_crouch(bool value)
{

  is_crouch_ = value;
}
inline void Player::set_is_crouch(bool value)
{
  _internal_set_is_crouch(value);
  // @@protoc_insertion_point(field_set:ser.Player.is_crouch)
}

// -------------------------------------------------------------------

// GameState

// int32 frame = 1;
inline void GameState::clear_frame()
{
  frame_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameState::_internal_frame() const
{
  return frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameState::frame() const
{
  // @@protoc_insertion_point(field_get:ser.GameState.frame)
  return _internal_frame();
}
inline void GameState::_internal_set_frame(::PROTOBUF_NAMESPACE_ID::int32 value)
{

  frame_ = value;
}
inline void GameState::set_frame(::PROTOBUF_NAMESPACE_ID::int32 value)
{
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:ser.GameState.frame)
}

// repeated .ser.Player players = 2;
inline int GameState::_internal_players_size() const
{
  return players_.size();
}
inline int GameState::players_size() const
{
  return _internal_players_size();
}
inline void GameState::clear_players()
{
  players_.Clear();
}
inline ::ser::Player* GameState::mutable_players(int index)
{
  // @@protoc_insertion_point(field_mutable:ser.GameState.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::Player>* GameState::
    mutable_players()
{
  // @@protoc_insertion_point(field_mutable_list:ser.GameState.players)
  return &players_;
}
inline const ::ser::Player& GameState::_internal_players(int index) const
{
  return players_.Get(index);
}
inline const ::ser::Player& GameState::players(int index) const
{
  // @@protoc_insertion_point(field_get:ser.GameState.players)
  return _internal_players(index);
}
inline ::ser::Player* GameState::_internal_add_players()
{
  return players_.Add();
}
inline ::ser::Player* GameState::add_players()
{
  ::ser::Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:ser.GameState.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::Player>& GameState::
    players() const
{
  // @@protoc_insertion_point(field_list:ser.GameState.players)
  return players_;
}

// repeated .ser.GameObject platforms = 3;
inline int GameState::_internal_platforms_size() const
{
  return platforms_.size();
}
inline int GameState::platforms_size() const
{
  return _internal_platforms_size();
}
inline void GameState::clear_platforms()
{
  platforms_.Clear();
}
inline ::ser::GameObject* GameState::mutable_platforms(int index)
{
  // @@protoc_insertion_point(field_mutable:ser.GameState.platforms)
  return platforms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::GameObject>* GameState::
    mutable_platforms()
{
  // @@protoc_insertion_point(field_mutable_list:ser.GameState.platforms)
  return &platforms_;
}
inline const ::ser::GameObject& GameState::_internal_platforms(int index) const
{
  return platforms_.Get(index);
}
inline const ::ser::GameObject& GameState::platforms(int index) const
{
  // @@protoc_insertion_point(field_get:ser.GameState.platforms)
  return _internal_platforms(index);
}
inline ::ser::GameObject* GameState::_internal_add_platforms()
{
  return platforms_.Add();
}
inline ::ser::GameObject* GameState::add_platforms()
{
  ::ser::GameObject* _add = _internal_add_platforms();
  // @@protoc_insertion_point(field_add:ser.GameState.platforms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::GameObject>& GameState::
    platforms() const
{
  // @@protoc_insertion_point(field_list:ser.GameState.platforms)
  return platforms_;
}

// repeated .ser.GameObject melee_attacks = 4;
inline int GameState::_internal_melee_attacks_size() const
{
  return melee_attacks_.size();
}
inline int GameState::melee_attacks_size() const
{
  return _internal_melee_attacks_size();
}
inline void GameState::clear_melee_attacks()
{
  melee_attacks_.Clear();
}
inline ::ser::GameObject* GameState::mutable_melee_attacks(int index)
{
  // @@protoc_insertion_point(field_mutable:ser.GameState.melee_attacks)
  return melee_attacks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::GameObject>* GameState::
    mutable_melee_attacks()
{
  // @@protoc_insertion_point(field_mutable_list:ser.GameState.melee_attacks)
  return &melee_attacks_;
}
inline const ::ser::GameObject& GameState::_internal_melee_attacks(int index) const
{
  return melee_attacks_.Get(index);
}
inline const ::ser::GameObject& GameState::melee_attacks(int index) const
{
  // @@protoc_insertion_point(field_get:ser.GameState.melee_attacks)
  return _internal_melee_attacks(index);
}
inline ::ser::GameObject* GameState::_internal_add_melee_attacks()
{
  return melee_attacks_.Add();
}
inline ::ser::GameObject* GameState::add_melee_attacks()
{
  ::ser::GameObject* _add = _internal_add_melee_attacks();
  // @@protoc_insertion_point(field_add:ser.GameState.melee_attacks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ser::GameObject>& GameState::
    melee_attacks() const
{
  // @@protoc_insertion_point(field_list:ser.GameState.melee_attacks)
  return melee_attacks_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace ser

PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::ser::PlayerState> : ::std::true_type
{
};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::PlayerState>()
{
  return ::ser::PlayerState_descriptor();
}
template <>
struct is_proto_enum<::ser::AttackPhase> : ::std::true_type
{
};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::AttackPhase>()
{
  return ::ser::AttackPhase_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_schema_2eproto
